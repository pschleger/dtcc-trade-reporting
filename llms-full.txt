# Java Client Template

> A structured template for building scalable web clients using Spring Boot, designed for seamless integration with Cyoda over gRPC and REST. Features workflow-driven backend interactions with fluent serialization APIs for type-safe processing.

## Documentation

default branch: main
- [README](https://github.com/Cyoda-platform/java-client-template/${branch}/README.md): Complete project documentation including setup, architecture, and workflow configuration
- [Usage Rules](https://github.com/Cyoda-platform/java-client-template/${branch}/usage-rules.md): Developer and AI agent guidelines for following project conventions

## Requirements & Specifications

- [Functional Requirements](https://github.com/Cyoda-platform/java-client-template/${branch}/src/main/java/com/java_template/prototype/functional_requirement.md): Detailed functional requirements for the user application
- [User Requirements](https://github.com/Cyoda-platform/java-client-template/${branch}/src/main/java/com/java_template/prototype/user_requirement.md): User-focused requirements specification for the user application

## Configuration

- [Build Configuration](https://github.com/Cyoda-platform/java-client-template/${branch}/build.gradle): Gradle build configuration with dependencies and plugins
- [Environment Template](https://github.com/Cyoda-platform/java-client-template/${branch}/.env.template): Environment variables template for Cyoda integration

---

# README.md

# Java Client Template

A structured template for building scalable web clients using **Spring Boot**, designed for seamless integration with **Cyoda** over **gRPC** and **REST**.

---

## üöÄ Features

- **Spring Boot**-based fast backend starter.
- Modular, extensible structure for rapid iteration.
- Built-in support for **gRPC** and **REST** APIs.
- Integration with **Cyoda**: workflow-driven backend interactions.
- Serialization architecture with fluent APIs for type-safe processing.

---

## üõ†Ô∏è Getting Started

> ‚òï **Java 21 Required**  
> Make sure Java 21 is installed and set as the active version.

### 1. Clone the Project

```bash
git clone <your-repository-URL>
cd java-client-template
```

### 2. üß∞ Run Workflow Import Tool

#### Option 1: Run via Gradle (recommended for local development)
```bash
./gradlew runApp -PmainClass=com.java_template.common.tool.WorkflowImportTool
```

#### Option 2: Build and Run JAR (recommended for CI or scripting)
```bash
./gradlew bootJarWorkflowImport
java -jar build/libs/java-client-template-1.0-SNAPSHOT-workflow-import.jar
```

### 3. ‚ñ∂Ô∏è Run the Application

#### Option 1: Run via Gradle
```bash
./gradlew runApp
```

#### Option 2: Run Manually After Build
```bash
./gradlew build
java -jar build/libs/java-client-template-1.0-SNAPSHOT.jar
```

> Access the app: [http://localhost:8080/swagger-ui/index.html](http://localhost:8080/swagger-ui/index.html)
>
> **Note**: The default port is 8080 as configured in `src/main/resources/application.yml`. You can change this by setting the `server.port` property.

---

## üß© Project Structure

### `common/`
Integration logic with Cyoda.

- `auth/` ‚Äì Manages login and refresh token logic (modifications not typically required).
- `config/` ‚Äì Contains constants, environment variables from .env, and enums.
- `grpc/` ‚Äì Handles integration with the Cyoda gRPC server (modifications usually unnecessary).
- `repository/` ‚Äì Facilitates integration with the Cyoda REST API (modifications usually unnecessary).
- `service/` ‚Äì Service layer for your application.
- `util/` ‚Äì Various utility functions.
- `workflow/` ‚Äì Core workflow processing architecture with CyodaProcessor and CyodaCriterion interfaces.
- `serializer/` ‚Äì Serialization layer with fluent APIs for processing requests and responses.
- `tool/` ‚Äì Utility tools like WorkflowImportTool for importing workflow configurations.

To interact with **Cyoda**, use `common/service/EntityService.java`, which provides all necessary methods.

To add new integrations with Cyoda, extend the following files:

- **Interface** ‚Äî `common/service/EntityService.java`: defines service methods; abstraction layer for Cyoda. Optional to modify.
- **Implementation** ‚Äî `common/service/EntityServiceImpl.java`: implements interface methods and business logic. Optional to modify.
- **Repository Interface** ‚Äî `common/repository/CrudRepository.java`: defines a generic interface. Modify only if additional operations are needed.
- **Cyoda Repository** ‚Äî `common/repository/CyodaRepository.java`: implements repository methods. Modify only if needed.

> ‚ö†Ô∏è `CrudRepository.java` and `CyodaRepository.java` rarely change ‚Äî only for significant updates to the data access layer.

‚úÖ Always interact with the **service interface**, not directly with the repository.

---

### `application/`
Application-specific logic and components:

- `controller/` ‚Äì HTTP endpoints and REST API controllers.
- `entity/` ‚Äì Domain entities (e.g., `pet/Pet.java`) that implement `CyodaEntity`.
- `processor/` ‚Äì Workflow processors that implement `CyodaProcessor` interface.
- `criterion/` ‚Äì Workflow criteria that implement `CyodaCriterion` interface.

### `entity/`
Domain logic structure. Contains entity structures.

- `$entity_name/Workflow.json` ‚Äì Workflow configuration files should be placed alongside entities in `application/entity/`.

---

## ‚öôÔ∏è API Reference ‚Äì `EntityService`

| Method                                                                                  | Return type                     | Description                           |
|-----------------------------------------------------------------------------------------|---------------------------------|---------------------------------------|
| `getItem(String model, String version, UUID technicalId)`                               | `CompletableFuture<ObjectNode>` | Get item by ID                        |
| `getItems(String model, String version)`                                                | `CompletableFuture<ArrayNode>`  | Get all items by model and version    |
| `getItemsByCondition(String entityModel, String entityVersion, Object condition)`       | `CompletableFuture<ArrayNode>`  | Get multiple items by condition       |
| `addItem(String entityModel, String entityVersion, Object entity)`                      | `CompletableFuture<UUID>`       | Add item                              |
| `addItems(String entityModel, String entityVersion, Object entities)`                   | `CompletableFuture<List<UUID>>` | Add multiple items                    |
| `updateItem(String entityModel, String entityVersion, UUID technicalId, Object entity)` | `CompletableFuture<UUID>`       | Update item                           |
| `deleteItem(String entityModel, String entityVersion, UUID technicalId)`                | `CompletableFuture<UUID>`       | Delete item                           |
| `deleteItems(String entityModel, String entityVersion)`                                 | `CompletableFuture<ArrayNode>`  | Delete all items by model and version |

> Use `import static com.java_template.common.config.Config.ENTITY_VERSION` for consistent versioning.

### üîë Where to get `technicalId`

For all methods that require a `technicalId` (such as `updateItem` or `deleteItem`), this field is **automatically included** in the returned entity when using methods like `getItem(...)`, `getItems(...)`, or `getItemsByCondition(...)`.

The `technicalId` represents the internal unique identifier of the entity instance and is required for update or delete operations.  
It is injected into the resulting `ObjectNode` during data retrieval:

```java
dataNode.put("technicalId", idNode.asText());
```

Make sure to preserve this field if the entity is passed to another operation.

## üì¶ Example: getItemsByCondition

To use `getItemsByCondition`, pass a condition object constructed with the following utility classes:

> Please use the following classes to construct search conditions for entity queries:
> - `Condition` ‚Äì `com.java_template.common.util.Condition`
> - `SearchConditionRequest` ‚Äì `com.java_template.common.util.SearchConditionRequest`

To create a condition, wrap it into a `SearchConditionRequest` with one or multiple elements in the list.
Use logical operators `AND`, `OR`, or `NOT`:

```java
SearchConditionRequest.group("AND",
    Condition.of("$.fieldName1", "EQUALS", "value"),
    Condition.of("$.fieldName2", "GREATER_THAN", 10)
);
```

You can then pass the resulting `SearchConditionRequest` object as the `condition` parameter to `getItemsByCondition`.

```java
entityService.getItemsByCondition("exampleModel", ENTITY_VERSION, yourSearchCondition);
```

---

## üîÑ Workflow Configuration

Located at:
```
application/entity/$entity_name/Workflow.json
```

> **Note**: Workflow configuration files should be placed alongside their corresponding entity classes in the `application/entity/` directory structure.

This file defines the workflow configuration using a **finite-state machine (FSM)**
model, which specifies states and transitions between them.

The workflow JSON consists of:
- **Metadata**: `version`, `name`, `desc`, `initialState`, `active`
- **Global criterion**: Optional workflow-level criterion for applicability
- **States**: Dictionary of states with their transitions
- **Transitions**: Each transition has `name`, `next`, `manual` flag, and optional `processors`/`criterion`

**Rules:**
- Start from the defined `initialState`.
- Avoid loops.
- If there are **multiple transitions** from one state,
  a **criterion** is required for each transition to decide which one to use.

FSM example:

```json
{
  "version": "1.0",
  "name": "template_workflow",
  "desc": "Template FSM with structured states, transitions, processors, and criterions",
  "initialState": "none",
  "active": true,
  "states": {
    "none": {
      "transitions": [
        {
          "name": "transition_to_01",
          "next": "state_01"
        }
      ]
    },
    "state_01": {
      "transitions": [
        {
          "name": "transition_to_02",
          "next": "state_02",
          "manual": true,
          "processors": [
            {
              "name": "example_function_name",
              "executionMode": "ASYNC_NEW_TX",
              "config": {
                "attachEntity": true,
                "calculationNodesTags": "cyoda_application",
                "responseTimeoutMs": 3000,
                "retryPolicy": "FIXED"
              }
            }
          ]
        }
      ]
    },
    "state_02": {
      "transitions": [
        {
          "name": "transition_with_criterion_simple",
          "next": "state_criterion_check_01",
          "processors": [
            {
              "name": "example_function_name",
              "executionMode": "ASYNC_NEW_TX",
              "config": {
                "attachEntity": true,
                "calculationNodesTags": "cyoda_application",
                "responseTimeoutMs": 3000,
                "retryPolicy": "FIXED"
              }
            }
          ],
          "criterion": {
            "type": "function",
            "function": {
              "name": "example_function_name_returns_bool",
              "config": {
                "attachEntity": true,
                "calculationNodesTags": "cyoda_application",
                "responseTimeoutMs": 5000,
                "retryPolicy": "FIXED"
              }
            }
          }
        }
      ]
    },
    "state_criterion_check_01": {
      "transitions": [
        {
          "name": "transition_with_criterion_group",
          "next": "state_terminal",
          "criterion": {
            "type": "group",
            "operator": "AND",
            "conditions": [
              {
                "type": "simple",
                "jsonPath": "$.sampleFieldA",
                "operation": "EQUALS",
                "value": "template_value_01"
              }
            ]
          }
        }
      ]
    },
    "state_terminal": {
      "transitions": []
    }
  }
}
```

### ‚úÖ Criterion Types

There are **three types of criteria** used to control transitions:

1. **Simple criterion** ‚Äî Direct field comparison
   Evaluates a single field against a value using an operation.

   ```json
   "criterion": {
     "type": "simple",
     "jsonPath": "$.customerType",
     "operation": "EQUALS",
     "value": "premium"
   }
   ```

2. **Group criterion** ‚Äî Logical combination of conditions
   Combines multiple simple or group conditions using logical operators.

   > ‚úÖ **Note:** `Group` criteria support **nesting**.
   > You can include both `simple` and `group` conditions inside the `conditions` array.

   ```json
   "criterion": {
     "type": "group",
     "operator": "AND",
     "conditions": [
       {
         "type": "simple",
         "jsonPath": "$.creditScore",
         "operation": "GREATER_OR_EQUAL",
         "value": 700
       },
       {
         "type": "simple",
         "jsonPath": "$.annualRevenue",
         "operation": "GREATER_THAN",
         "value": 1000000
       }
     ]
   }
   ```

3. **Function criterion** ‚Äî Custom client-side evaluation
   Executes a custom function with optional nested criterion.

   > ‚ö†Ô∏è The function must be implemented as a `CyodaCriterion` component.
   > Its name **must be unique and match** `function.name`.

   ```json
   "criterion": {
     "type": "function",
     "function": {
       "name": "example_function_name_returns_bool",
       "config": {
         "attachEntity": true,
         "calculationNodesTags": "validation,criteria",
         "responseTimeoutMs": 5000,
         "retryPolicy": "FIXED"
       },
       "criterion": {
         "type": "simple",
         "jsonPath": "$.sampleFieldB",
         "operation": "GREATER_THAN",
         "value": 100
       }
     }
   }
   ```

   > **jsonPath field reference:**
   > - Use the **`$.` prefix** for custom (business) fields of the entity.
   > - Use **no prefix** for built-in entity meta-fields.
   >   Supported meta-fields: `state`, `previousTransition`, `creationDate`, `lastUpdateTime`.

Supported criterion `types`:

- `simple`
- `group`
- `function`

Supported group `operator` values:

- `AND`
- `OR`
- `NOT`

Supported operation values (`*_OR_EQUAL` includes the boundary):

```
EQUALS, NOT_EQUAL, IS_NULL, NOT_NULL, GREATER_THAN, GREATER_OR_EQUAL, LESS_THAN, LESS_OR_EQUAL,
CONTAINS, STARTS_WITH, ENDS_WITH, NOT_CONTAINS, NOT_STARTS_WITH, NOT_ENDS_WITH, MATCHES_PATTERN, BETWEEN, BETWEEN_INCLUSIVE
```

---

## üß† Workflow Processors

The logic for processing workflows is implemented using **CyodaProcessor** and **CyodaCriterion** interfaces in the `application/` directory.

### Processor Architecture

Processors implement the `CyodaProcessor` interface and use the **EntityProcessingChain** API for type-safe entity processing. Processors are configured in workflow transitions with execution modes and configuration options:

```java
@Component
public class AddLastModifiedTimestamp implements CyodaProcessor {

    private final ProcessorSerializer serializer;

    @Override
    public EntityProcessorCalculationResponse process(CyodaEventContext<EntityProcessorCalculationRequest> context) {
        EntityProcessorCalculationRequest request = context.getEvent();

        // Fluent entity processing with validation
        return serializer.withRequest(request)
            .toEntity(Pet.class)
            .validate(pet -> pet.getId() != null && pet.getName() != null)
            .map(pet -> {
                pet.addLastModifiedTimestamp();
                return pet;
            })
            .complete();
    }

    @Override
    public boolean supports(OperationSpecification modelKey) {
        // Match based on processor name from workflow configuration
        return "example_function_name".equals(modelKey.operationName());
    }
}
```

### Processor Configuration

Processors in workflow transitions support various execution modes and configuration options:

```json
"processors": [
  {
    "name": "example_function_name",
    "executionMode": "SYNC",
    "config": {
      "attachEntity": true,
      "calculationNodesTags": "test_tag_01",
      "responseTimeoutMs": 3000,
      "retryPolicy": "FIXED"
    }
  }
]
```

**Execution Modes:**
- `SYNC` - Synchronous execution (default)
- `ASYNC_SAME_TX` - Asynchronous execution in the same transaction
- `ASYNC_NEW_TX` - Asynchronous execution in new transaction

**Configuration Options:**
- `attachEntity` - Whether to attach entity data to the request
- `calculationNodesTags` - Tags for calculation node selection
- `responseTimeoutMs` - Response timeout in milliseconds
- `retryPolicy` - Retry policy for failed executions

### Execution Mode Reference

```json
"executionMode": {
  "type": "string",
  "description": "Execution mode of the processor",
  "enum": [
    "SYNC",
    "ASYNC_SAME_TX",
    "ASYNC_NEW_TX"
  ],
  "default": "SYNC"
}
```

### EntityProcessingChain API

The **EntityProcessingChain** provides a clean, type-safe API for entity processing:

- `toEntity(Class<T>)` - Extract entity and initiate entity flow
- `map(Function<T, T>)` - Transform entity instances
- `validate(Function<T, Boolean>)` - Validate entities with default error message
- `validate(Function<T, Boolean>, String)` - Validate entities with custom error message
- `toJsonFlow(Function<T, JsonNode>)` - Switch to JSON processing
- `complete()` - Complete processing with automatic entity-to-JSON conversion
- `complete(Function<T, JsonNode>)` - Complete with custom entity converter

### Criteria Implementation

Criteria implement the `CyodaCriterion` interface for condition checking using **EvaluationOutcome** sealed classes with **logical chaining**:

```java
@Component
public class IsValidPet implements CyodaCriterion {

    private final CriterionSerializer serializer;

    @Override
    public EntityCriteriaCalculationResponse check(CyodaEventContext<EntityCriteriaCalculationRequest> context) {
        EntityCriteriaCalculationRequest request = context.getEvent();

        return serializer.withRequest(request)
            .evaluateEntity(Pet.class, this::validatePet)
            .withReasonAttachment(ReasonAttachmentStrategy.toWarnings())
            .complete();
    }

    private EvaluationOutcome validatePet(Pet pet) {
        // Chain all validation checks with AND logic - first failure stops the chain
        return validatePetExists(pet)
            .and(validatePetBasicValidity(pet))
            .and(validateBasicStructure(pet))
            .and(validateBusinessRules(pet))
            .and(validateDataQuality(pet));
    }

    private EvaluationOutcome validatePetExists(Pet pet) {
        return pet == null ?
            EvaluationOutcome.Fail.structuralFailure("Pet entity is null") :
            EvaluationOutcome.success();
    }

    private EvaluationOutcome validateBasicStructure(Pet pet) {
        // Chain multiple field validations
        return validatePetId(pet).and(validatePetName(pet));
    }

    // ... other validation methods
}
```

### ‚öôÔ∏è Registration mechanism

Workflow components are **automatically discovered** via Spring's dependency injection system using the `OperationFactory`.

Here's how it works:

1. **Processor Discovery**: All Spring beans implementing `CyodaProcessor` are automatically collected by the `OperationFactory`.

2. **Criterion Discovery**: All Spring beans implementing `CyodaCriterion` are automatically collected by the `OperationFactory`.

3. **Operation Matching**: When a gRPC event arrives, the `OperationFactory` finds the appropriate processor or criterion by:
   - Calling the `supports(OperationSpecification)` method on each component
   - Matching based on the operation name from workflow configuration (e.g., `action.name` or `condition.function.name`)
   - Caching successful matches for performance using `ConcurrentHashMap`

4. **Execution**: The matched component processes the request using its `process()` or `check()` method.

### Component Registration

To register a processor or criterion:

1. **Create a class** implementing `CyodaProcessor` or `CyodaCriterion`
2. **Add `@Component` annotation** for Spring discovery
3. **Implement the `supports()` method** to define when this component should be used
4. **Implement the processing method** (`process()` for processors, `check()` for criteria)

> ‚úÖ Component operation names are matched against the `processors[].name` or `criterion.function.name` in workflow configuration via the `supports()` method. The `supports()` method should return `true` when `modelKey.operationName()` matches the expected operation name.

---

## üîÑ Serializer Architecture

The application uses a serializer architecture with fluent APIs:

### ProcessorSerializer (in `common/serializer/`)
- **Purpose**: Handles entity extraction and response building for processors
- **Key Methods**:
  - `withRequest(request)` - Start fluent processing chain
  - `extractEntity(request, Class<T>)` - Extract typed entities
  - `extractPayload(request)` - Extract raw JSON payload
  - `responseBuilder(request)` - Create response builders

### CriterionSerializer (in `common/serializer/`)
- **Purpose**: Handles entity extraction and response building for criteria
- **Key Methods**:
  - `withRequest(request)` - Start fluent evaluation chain
  - `evaluate(Function<JsonNode, EvaluationOutcome>)` - Evaluate JSON with outcomes
  - `evaluateEntity(Class<T>, Function<T, EvaluationOutcome>)` - Evaluate entities with outcomes
  - `withReasonAttachment(ReasonAttachmentStrategy)` - Configure reason attachment
  - `withErrorHandler(BiFunction<Throwable, JsonNode, ErrorInfo>)` - Configure error handling

### ProcessingChain vs EntityProcessingChain
- **ProcessingChain**: JSON-based processing with `map(Function<JsonNode, JsonNode>)`
- **EntityProcessingChain**: Type-safe entity processing with `map(Function<T, T>)`
- **Transition**: Use `toEntity(Class<T>)` to switch from JSON to entity flow
- **Transition**: Use `toJsonFlow(Function<T, JsonNode>)` to switch from entity to JSON flow

### SerializerFactory
- **Purpose**: Provides access to different serializer implementations
- **Default**: Jackson-based serializers for JSON processing
- **Usage**: Injected into processors and criteria for consistent serialization

**Example Usage:**
```java
// Instead of hardcoded strings
return serializer.responseBuilder(request)
    .withError("PROCESSING_ERROR", "Processing failed")
    .build();

// Use the enum for type safety
return serializer.responseBuilder(request)
    .withError(StandardErrorCodes.PROCESSING_ERROR.getCode(), "Processing failed")
    .build();
```

---

# usage-rules.md

# Usage Rules

This file helps both developers and AI agents follow conventions in the Java Client Template project. This file can be updated via project-specific tooling and should be maintained alongside code changes.

<!-- entities-start -->
<!-- SYNC_COMMENT: synchronize via project tooling for entities -->
## Entities

- Always implement `CyodaEntity` interface for domain entities
- Use `Config.ENTITY_VERSION` constant instead of hardcoded version strings
- Place entity classes in `application/entity/` directory for automatic discovery
- Implement `getModelKey()` to return `OperationSpecification.Entity` with proper ModelSpec
- Override `isValid()` method to provide entity-specific validation logic
- Use static `ENTITY_NAME` constant for consistent entity naming
- Entity `id` types vary by entity (e.g., Pet uses `Long`, Mail uses different types)
<!-- entities-end -->

<!-- processors-start -->
<!-- SYNC_COMMENT: synchronize via project tooling for processors -->
## Processors (CyodaProcessor)

- Implement `CyodaProcessor` interface for workflow processing components
- Use `@Component` annotation for automatic Spring discovery
- Inject `SerializerFactory` in constructor and get specific serializer immediately
- Use `ProcessorSerializer.withRequest(request).toEntity(Class).map().complete()` pattern
- Implement `supports(OperationSpecification)` method for processor selection
- Processor names are matched via `supports()` method against workflow configuration
- Use fluent EntityProcessingChain API for type-safe entity processing
- Always handle exceptions properly - either log and handle or throw without logging, never both
<!-- processors-end -->

<!-- criteria-start -->
<!-- SYNC_COMMENT: synchronize via project tooling for criteria -->
## Criteria (CyodaCriterion)

- Implement `CyodaCriterion` interface for workflow criteria checking
- Criteria MUST be pure functions - no side effects or payload modifications
- Use `CriterionSerializer.withRequest(request).evaluateEntity(Class, validator).complete()` pattern
- Implement `supports(OperationSpecification)` method for criteria selection
- Use `EvaluationOutcome.and()` chaining for validation logic
- Return boolean evaluation results only - no entity modifications
- Use `withReasonAttachment(ReasonAttachmentStrategy.toWarnings())` for validation feedback
<!-- criteria-end -->

<!-- serializers-start -->
<!-- SYNC_COMMENT: synchronize via project tooling for serializers -->
## Serializers

- Use `SerializerFactory` to get appropriate serializer instances
- Prefer `ProcessorSerializer` for processors and `CriterionSerializer` for criteria
- Use fluent APIs: `withRequest().toEntity().map().complete()` for processors
- Use fluent APIs: `withRequest().evaluateEntity().complete()` for criteria
- Jackson serializers are the default implementation (`SerializerEnum.JACKSON`)
- Always validate requests before processing in serializer implementations
- Use `ResponseBuilder.forProcessor()` and `ResponseBuilder.forCriterion()` for responses
<!-- serializers-end -->

<!-- services-start -->
<!-- SYNC_COMMENT: synchronize via project tooling for services -->
## Services

- Always interact with `EntityService` interface, not repository directly
- Use `CompletableFuture` return types for all async operations
- Pass entity model name, version, and technical ID for entity operations
- Use `Config.ENTITY_VERSION` for version parameter
- Prefer `getItemsByCondition()` over manual filtering
- Use `addItem()` for single entities, `addItems()` for bulk operations
- Handle `InterruptedException` and `ExecutionException` in service calls
<!-- services-end -->

<!-- controllers-start -->
<!-- SYNC_COMMENT: synchronize via project tooling for controllers -->
## Controllers

- Use `@RestController` and `@RequestMapping` for REST endpoints
- Inject `EntityService` and `ObjectMapper` via constructor
- Use `@Valid` annotation for request body validation
- Return appropriate HTTP status codes (400 for validation, 404 for not found, 500 for errors)
- Log errors with context information (entity ID, operation type)
- Use `ResponseEntity<T>` for proper HTTP response handling
- Convert between entity objects and JSON using `ObjectMapper`
<!-- controllers-end -->

<!-- workflow-start -->
<!-- SYNC_COMMENT: synchronize via project tooling for workflow -->
## Workflow Configuration

- Place `Workflow.json` files alongside entity classes in `application/entity/` directory
- Use finite-state machine (FSM) model for workflow definitions
- Avoid cyclic FSM states in workflow configuration
- Component operation names must match `supports()` method implementations
- Use `WorkflowImportTool` for importing workflow configurations
- Workflow methods should be separate processor classes, not switch-based dispatch
<!-- workflow-end -->

<!-- config-start -->
<!-- SYNC_COMMENT: synchronize via project tooling for config -->
## Configuration

- Use `Config` class constants instead of hardcoded values
- Load environment variables via `Dotenv` in Config class
- Use `Config.ENTITY_VERSION` for entity versioning (default '1000')
- Configure GRPC settings via environment variables
- Use `Config.CYODA_HOST` and related constants for Cyoda integration
- SSL and authentication settings should be configurable via environment
<!-- config-end -->

<!-- testing-start -->
<!-- SYNC_COMMENT: synchronize via project tooling for testing -->
## Testing

- Use `PrototypeApplicationTest` for test-based prototype development
- Enable prototype mode via `-Dprototype.enabled=true` system property
- Test serializers using fluent API patterns
- Mock `EntityService` and `SerializerFactory` in unit tests
- Use `ObjectMapper` for JSON conversion in tests
- Test both success and error scenarios for processors and criteria
<!-- testing-end -->

<!-- architecture-start -->
<!-- SYNC_COMMENT: synchronize via project tooling for architecture -->
## Architecture Guidelines

- Follow separation of concerns: entities, processors, criteria, services, controllers
- Use dependency injection via Spring constructor injection
- Implement interfaces rather than concrete classes for better testability
- Use sealed classes for type-safe operation specifications
- Prefer composition over inheritance in workflow components
- Use factory patterns for component selection and instantiation
- Handle async operations with CompletableFuture consistently
<!-- architecture-end -->
