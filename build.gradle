plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.freefair.lombok' version '8.4'
    id "org.jsonschema2pojo" version "1.2.1"
    id 'com.google.protobuf' version '0.9.4'
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

group = 'com.java-template'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated/source/proto/main/java"
            srcDirs += "$buildDir/generated/source/proto/main/grpc"
            srcDirs += "$buildDir/generated-sources/js2p"
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web:3.5.3'
    implementation 'org.springframework.boot:spring-boot-starter' // Version managed by Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client' // Version managed by Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-security' // Version managed by Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-validation' // Version managed by Spring Boot

    implementation 'com.google.protobuf:protobuf-java:4.31.1'
    implementation 'io.grpc:grpc-protobuf:1.73.0'
    implementation 'io.grpc:grpc-core:1.73.0'
    implementation 'io.grpc:grpc-stub:1.73.0'

    implementation 'io.grpc:grpc-all:1.73.0'

    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    implementation 'io.cloudevents:cloudevents-protobuf:4.0.1'
    implementation 'io.cloudevents:cloudevents-json-jackson:4.0.1'
    implementation 'io.cloudevents:cloudevents-spring:4.0.1'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.19.1'

    // XML Processing and Validation
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.5'
    implementation 'org.apache.commons:commons-lang3:3.17.0'

    // Rate Limiting - using Caffeine cache for simple rate limiting
    // implementation 'io.github.bucket4j:bucket4j-core:8.10.1'
    // implementation 'io.github.bucket4j:bucket4j-caffeine:8.10.1'

    implementation 'io.github.cdimascio:java-dotenv:5.2.2'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.5'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'com.fasterxml.uuid:java-uuid-generator:4.0.1'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation platform('org.junit:junit-bom:5.13.1')
    testImplementation 'org.junit.jupiter:junit-jupiter:5.13.1'
    testImplementation 'org.springframework.security:spring-security-test'
}

test {
    useJUnitPlatform()

    // Pass system properties to tests (needed for conditional test execution)
    systemProperties = System.properties
}

jsonSchema2Pojo {
    source = files("src/main/resources/schema")
    targetDirectory = file("$buildDir/generated-sources/js2p")
    targetPackage = 'org.cyoda.cloud.api.event'
    generateBuilders = true
    usePrimitives = false
    includeAdditionalProperties = false
    includeHashcodeAndEquals = true
    includeToString = true
    annotationStyle = 'jackson2'
    sourceType = 'jsonschema'
    removeOldOutput = true
    includeConstructors = false
    includeRequiredPropertiesConstructor = false
    includeAllPropertiesConstructor = true
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.25.1'
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.62.2'
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

["bootRun", "build", "compileJava"].each { taskName ->
    tasks.named(taskName).configure {
        dependsOn("generateProto")
        dependsOn("generateJsonSchema2Pojo")
    }
}

bootJar {
    mainClass.set("com.java_template.Application")
}

// Prototype mode is handled via conditional test: ./gradlew test --tests PrototypeApplicationTest -Dprototype.enabled=true

task bootJarWorkflowImport(type: org.springframework.boot.gradle.tasks.bundling.BootJar) {
    group = 'build'
    description = 'Boot JAR for Workflow Import Tool'
    archiveClassifier.set("workflow-import")
    mainClass.set("com.java_template.common.tool.WorkflowImportTool")
    destinationDirectory.set(layout.buildDirectory.dir("libs"))
    launchScript()
    classpath = sourceSets.main.runtimeClasspath
    mainClassName = "com.java_template.common.tool.WorkflowImportTool"
    targetJavaVersion = JavaVersion.VERSION_21
    dependsOn configurations.runtimeClasspath
}

tasks.register('runApp', JavaExec) {
    group = 'application'
    description = 'Run arbitrary main class'
    classpath = sourceSets.main.runtimeClasspath
    def requestedMain = project.findProperty('mainClass') ?: 'com.java_template.Application'
    mainClass.set(requestedMain.toString())
    javaLauncher.set(javaToolchains.launcherFor {
        languageVersion.set(JavaLanguageVersion.of(21))
    })
}
